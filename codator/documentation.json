{
  "pipes": [],
  "interfaces": [
    {
      "name": "ApiStrategy",
      "id": "interface-ApiStrategy-c9c97f6d2e611bbec019fa91c711fe49495dee258184689f9e92f795517361dc3fe09115425f7f374a34410f864acf704d27b0d43bb9d7b3851a3df4fbc0cc8b",
      "file": "src/app/interfaces/api.strategy.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ApiStrategy {\r\n  processText(input: string): Promise<string>;\r\n  getFile?(path: string): Promise<File | null>;\r\n  saveFile?(path: string, data: Blob): Promise<void>;\r\n}\r\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 173,
      "methods": [
        {
          "name": "getFile",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": true,
          "returnType": "Promise<File | null>",
          "typeParameters": [],
          "line": 3,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "processText",
          "args": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 2,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveFile",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "data",
              "type": "Blob",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": true,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 4,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "data",
              "type": "Blob",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": []
    },
    {
      "name": "Assistant",
      "id": "interface-Assistant-342dd976f5ad4168fae51914debda11feaafd21c73a57d7af71062b80327554405e801a2dd8187cd3dd0244a50e0abc425266fbb70e2a151a51d8b1582518f1f",
      "file": "src/app/interfaces/assistant.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FocusedMemory {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  data: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  tags: string[] | null;\r\n}\r\n\r\nexport interface MemoryFocusRule {\r\n  id: string;\r\n  assistantId: string;\r\n  maxResults: number;\r\n  relationshipTypes: string[];\r\n  priorityTags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FeedbackSummary {\r\n  avgRating: number;\r\n  totalFeedback: number;\r\n}\r\n\r\nexport interface AssistantFull extends Assistant {\r\n  assistantTags: string[];\r\n  focusedMemories: FocusedMemory[];\r\n  memoryFocusRule: MemoryFocusRule;\r\n  feedbackSummary: FeedbackSummary;\r\n}\r\n\r\nexport interface Message {\r\n  id: string; // Unique identifier for the message\r\n  type: 'request' | 'response'; // Type of message (request or response)\r\n  content: string; // The content of the message\r\n  timestamp: string; // Timestamp for tracking the time of the message\r\n}\r\n",
      "properties": [
        {
          "name": "createdAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "updatedAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "Assistant",
      "id": "interface-Assistant-342dd976f5ad4168fae51914debda11feaafd21c73a57d7af71062b80327554405e801a2dd8187cd3dd0244a50e0abc425266fbb70e2a151a51d8b1582518f1f-1",
      "file": "src/app/interfaces/assistant.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FocusedMemory {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  data: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  tags: string[] | null;\r\n}\r\n\r\nexport interface MemoryFocusRule {\r\n  id: string;\r\n  assistantId: string;\r\n  maxResults: number;\r\n  relationshipTypes: string[];\r\n  priorityTags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FeedbackSummary {\r\n  avgRating: number;\r\n  totalFeedback: number;\r\n}\r\n\r\nexport interface AssistantFull extends Assistant {\r\n  assistantTags: string[];\r\n  focusedMemories: FocusedMemory[];\r\n  memoryFocusRule: MemoryFocusRule;\r\n  feedbackSummary: FeedbackSummary;\r\n}\r\n\r\nexport interface Message {\r\n  id: string; // Unique identifier for the message\r\n  type: 'request' | 'response'; // Type of message (request or response)\r\n  content: string; // The content of the message\r\n  timestamp: string; // Timestamp for tracking the time of the message\r\n}\r\n",
      "properties": [
        {
          "name": "createdAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "updatedAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": [],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "Assistant-1"
    },
    {
      "name": "AssistantFull",
      "id": "interface-AssistantFull-342dd976f5ad4168fae51914debda11feaafd21c73a57d7af71062b80327554405e801a2dd8187cd3dd0244a50e0abc425266fbb70e2a151a51d8b1582518f1f",
      "file": "src/app/interfaces/assistant.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FocusedMemory {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  data: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  tags: string[] | null;\r\n}\r\n\r\nexport interface MemoryFocusRule {\r\n  id: string;\r\n  assistantId: string;\r\n  maxResults: number;\r\n  relationshipTypes: string[];\r\n  priorityTags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FeedbackSummary {\r\n  avgRating: number;\r\n  totalFeedback: number;\r\n}\r\n\r\nexport interface AssistantFull extends Assistant {\r\n  assistantTags: string[];\r\n  focusedMemories: FocusedMemory[];\r\n  memoryFocusRule: MemoryFocusRule;\r\n  feedbackSummary: FeedbackSummary;\r\n}\r\n\r\nexport interface Message {\r\n  id: string; // Unique identifier for the message\r\n  type: 'request' | 'response'; // Type of message (request or response)\r\n  content: string; // The content of the message\r\n  timestamp: string; // Timestamp for tracking the time of the message\r\n}\r\n",
      "properties": [
        {
          "name": "assistantTags",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "feedbackSummary",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FeedbackSummary",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "focusedMemories",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FocusedMemory[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "memoryFocusRule",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MemoryFocusRule",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 49
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": ["Assistant"]
    },
    {
      "name": "FeedbackSummary",
      "id": "interface-FeedbackSummary-342dd976f5ad4168fae51914debda11feaafd21c73a57d7af71062b80327554405e801a2dd8187cd3dd0244a50e0abc425266fbb70e2a151a51d8b1582518f1f",
      "file": "src/app/interfaces/assistant.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FocusedMemory {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  data: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  tags: string[] | null;\r\n}\r\n\r\nexport interface MemoryFocusRule {\r\n  id: string;\r\n  assistantId: string;\r\n  maxResults: number;\r\n  relationshipTypes: string[];\r\n  priorityTags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FeedbackSummary {\r\n  avgRating: number;\r\n  totalFeedback: number;\r\n}\r\n\r\nexport interface AssistantFull extends Assistant {\r\n  assistantTags: string[];\r\n  focusedMemories: FocusedMemory[];\r\n  memoryFocusRule: MemoryFocusRule;\r\n  feedbackSummary: FeedbackSummary;\r\n}\r\n\r\nexport interface Message {\r\n  id: string; // Unique identifier for the message\r\n  type: 'request' | 'response'; // Type of message (request or response)\r\n  content: string; // The content of the message\r\n  timestamp: string; // Timestamp for tracking the time of the message\r\n}\r\n",
      "properties": [
        {
          "name": "avgRating",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "totalFeedback",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 43
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "FocusedMemory",
      "id": "interface-FocusedMemory-342dd976f5ad4168fae51914debda11feaafd21c73a57d7af71062b80327554405e801a2dd8187cd3dd0244a50e0abc425266fbb70e2a151a51d8b1582518f1f",
      "file": "src/app/interfaces/assistant.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FocusedMemory {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  data: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  tags: string[] | null;\r\n}\r\n\r\nexport interface MemoryFocusRule {\r\n  id: string;\r\n  assistantId: string;\r\n  maxResults: number;\r\n  relationshipTypes: string[];\r\n  priorityTags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FeedbackSummary {\r\n  avgRating: number;\r\n  totalFeedback: number;\r\n}\r\n\r\nexport interface AssistantFull extends Assistant {\r\n  assistantTags: string[];\r\n  focusedMemories: FocusedMemory[];\r\n  memoryFocusRule: MemoryFocusRule;\r\n  feedbackSummary: FeedbackSummary;\r\n}\r\n\r\nexport interface Message {\r\n  id: string; // Unique identifier for the message\r\n  type: 'request' | 'response'; // Type of message (request or response)\r\n  content: string; // The content of the message\r\n  timestamp: string; // Timestamp for tracking the time of the message\r\n}\r\n",
      "properties": [
        {
          "name": "createdAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any | null",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "tags",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[] | null",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "updatedAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 27
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "FunctionScript",
      "id": "interface-FunctionScript-6faf0749f70112532ba84ddb12d6e971be6aae0e6983bf8f3681f62afb3b5e04dc0dd1e4ac49ed7e45f7a827b549bb20a4e5ff6c46dce593e0054778bf491512",
      "file": "src/app/interfaces/function-script.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface FunctionScript {\r\n  id: string; // Unique identifier\r\n  name: string; // Human-readable name\r\n  description?: string; // Optional description\r\n  code: string; // JavaScript/TypeScript code as a string\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n",
      "properties": [
        {
          "name": "code",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "createdAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "updatedAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "MemoryFocusRule",
      "id": "interface-MemoryFocusRule-342dd976f5ad4168fae51914debda11feaafd21c73a57d7af71062b80327554405e801a2dd8187cd3dd0244a50e0abc425266fbb70e2a151a51d8b1582518f1f",
      "file": "src/app/interfaces/assistant.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FocusedMemory {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  data: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  tags: string[] | null;\r\n}\r\n\r\nexport interface MemoryFocusRule {\r\n  id: string;\r\n  assistantId: string;\r\n  maxResults: number;\r\n  relationshipTypes: string[];\r\n  priorityTags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FeedbackSummary {\r\n  avgRating: number;\r\n  totalFeedback: number;\r\n}\r\n\r\nexport interface AssistantFull extends Assistant {\r\n  assistantTags: string[];\r\n  focusedMemories: FocusedMemory[];\r\n  memoryFocusRule: MemoryFocusRule;\r\n  feedbackSummary: FeedbackSummary;\r\n}\r\n\r\nexport interface Message {\r\n  id: string; // Unique identifier for the message\r\n  type: 'request' | 'response'; // Type of message (request or response)\r\n  content: string; // The content of the message\r\n  timestamp: string; // Timestamp for tracking the time of the message\r\n}\r\n",
      "properties": [
        {
          "name": "assistantId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "createdAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "maxResults",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "priorityTags",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "relationshipTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "updatedAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 38
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "Message",
      "id": "interface-Message-342dd976f5ad4168fae51914debda11feaafd21c73a57d7af71062b80327554405e801a2dd8187cd3dd0244a50e0abc425266fbb70e2a151a51d8b1582518f1f",
      "file": "src/app/interfaces/assistant.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: string;\r\n  model: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FocusedMemory {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  data: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  tags: string[] | null;\r\n}\r\n\r\nexport interface MemoryFocusRule {\r\n  id: string;\r\n  assistantId: string;\r\n  maxResults: number;\r\n  relationshipTypes: string[];\r\n  priorityTags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface FeedbackSummary {\r\n  avgRating: number;\r\n  totalFeedback: number;\r\n}\r\n\r\nexport interface AssistantFull extends Assistant {\r\n  assistantTags: string[];\r\n  focusedMemories: FocusedMemory[];\r\n  memoryFocusRule: MemoryFocusRule;\r\n  feedbackSummary: FeedbackSummary;\r\n}\r\n\r\nexport interface Message {\r\n  id: string; // Unique identifier for the message\r\n  type: 'request' | 'response'; // Type of message (request or response)\r\n  content: string; // The content of the message\r\n  timestamp: string; // Timestamp for tracking the time of the message\r\n}\r\n",
      "properties": [
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "timestamp",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"request\" | \"response\"",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 55
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "ScriptStorageStrategy",
      "id": "interface-ScriptStorageStrategy-48615b52bb075325606d1f9f442257e640ea5b44b6d246effb79ba71dfe3081dee47e52e4f723ff0cf89ece33ee15f6f7aa17f7d0ec3f386253f5330462762c1",
      "file": "src/app/interfaces/script-storage.strategy.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { FunctionScript } from './function-script.interface';\r\n\r\nexport interface ScriptStorageStrategy {\r\n  save(script: FunctionScript): Promise<void>;\r\n  get(id: string): Promise<FunctionScript | null>;\r\n  getAll(): Promise<FunctionScript[]>;\r\n  delete(id: string): Promise<void>;\r\n}\r\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 173,
      "methods": [
        {
          "name": "delete",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "get",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<FunctionScript | null>",
          "typeParameters": [],
          "line": 5,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAll",
          "args": [],
          "optional": false,
          "returnType": "Promise<FunctionScript[]>",
          "typeParameters": [],
          "line": 6,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 4,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": []
    }
  ],
  "injectables": [
    {
      "name": "ApiService",
      "id": "injectable-ApiService-634f1fa01f2306ecbd6a356acb6565d99c872a91b10f93d2f97073f93f4f77096f759f1fd81ef44e327eab4cc29b0bc6aa3fb71a98995e631f3fb89c3ff5b8d4",
      "file": "src/app/services/general-services/api.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "processText",
          "args": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { API_STRATEGY } from '../../api-strategy-provider';\r\nimport { ApiStrategy } from '../../interfaces/api.strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiService implements ApiStrategy {\r\n  constructor() {}\r\n\r\n  async processText(input: string): Promise<string> {\r\n    return '';\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ApiStrategyProvider",
      "id": "injectable-ApiStrategyProvider-09cdb7a56355c53e1de57d814cf04d2fe568d1a07d03f99187a654c44c0f8a85c4ccdf29b3c7ff910c62728ff47faea724f0ca06b36e83ff4d4765faf11cceaa",
      "file": "src/app/api-strategy-provider.ts",
      "properties": [
        {
          "name": "strategy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ApiStrategy",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "getStrategy",
          "args": [],
          "optional": false,
          "returnType": "ApiStrategy",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, InjectionToken, Provider } from '@angular/core';\r\nimport { environment } from '../environments/environment.electron';\r\nimport { ApiStrategy } from './interfaces/api.strategy.interface';\r\nimport { ElectronApiService } from './services/general-services/electron-api.service';\r\nimport { WebsiteApiService } from './services/general-services/website-api.service';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport const API_STRATEGY = new InjectionToken<ApiStrategy>('API_STRATEGY');\r\n\r\n@Injectable()\r\nexport class ApiStrategyProvider {\r\n  private strategy: ApiStrategy;\r\n\r\n  constructor(http: HttpClient) {\r\n    this.strategy =\r\n      environment.platform === 'electron'\r\n        ? new ElectronApiService()\r\n        : new WebsiteApiService(http);\r\n  }\r\n\r\n  getStrategy(): ApiStrategy {\r\n    return this.strategy;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "AssistantService",
      "id": "injectable-AssistantService-7d426c574074415888610385c6286b8dfb286de4671b9dd3ce6b8fe445c778f2a030aa603e66af73832399db15f04852e126535add8cd421e9c8d70a40ce8c2a",
      "file": "src/app/services/assistants-services/assistant.service.ts",
      "properties": [
        {
          "name": "apiUrl",
          "defaultValue": "ASSISTANT_API_CONFIG.baseUrl + ASSISTANT_API_CONFIG.assistantUrl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [123]
        },
        {
          "name": "selectedAssistant$",
          "defaultValue": "this.selectedAssistantSubject.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "selectedAssistantSubject",
          "defaultValue": "new BehaviorSubject<Assistant | null>(\r\n    null\r\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "getAllAssistants",
          "args": [],
          "optional": false,
          "returnType": "Observable<literal type>",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getAssistantById",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<Assistant>",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFullAssistantById",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<AssistantFull>",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getSelectedAssistant",
          "args": [],
          "optional": false,
          "returnType": "Assistant | null",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "selectAssistant",
          "args": [
            {
              "name": "assistant",
              "type": "Assistant",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "assistant",
              "type": "Assistant",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, map } from 'rxjs';\r\nimport { Assistant, AssistantFull } from '../../interfaces/assistant.model';\r\nimport { ASSISTANT_API_CONFIG } from '../../app.config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AssistantService {\r\n  private apiUrl =\r\n    ASSISTANT_API_CONFIG.baseUrl + ASSISTANT_API_CONFIG.assistantUrl; // Base API URL\r\n  private selectedAssistantSubject = new BehaviorSubject<Assistant | null>(\r\n    null\r\n  ); // To store selected assistant\r\n  selectedAssistant$ = this.selectedAssistantSubject.asObservable(); // Observable to subscribe to\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all assistants\r\n  getAllAssistants(): Observable<{ data: Assistant[] }> {\r\n    return this.http.get<{ data: Assistant[] }>(`${this.apiUrl}/`);\r\n  }\r\n\r\n  // Get a specific assistant by id\r\n  getAssistantById(id: string): Observable<Assistant> {\r\n    return this.http.get<Assistant>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  getFullAssistantById(id: string): Observable<AssistantFull> {\r\n    return this.http.get<any>(`${this.apiUrl}details/${id}`).pipe(\r\n      map((response) => response.data) // Extract the 'data' part and return it as an Observable\r\n    );\r\n  }\r\n\r\n  getSelectedAssistant(): Assistant | null {\r\n    return this.selectedAssistantSubject.getValue();\r\n  }\r\n\r\n  // Select an assistant\r\n  selectAssistant(assistant: Assistant): void {\r\n    this.selectedAssistantSubject.next(assistant);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ElectronApiService",
      "id": "injectable-ElectronApiService-89452175119e711609fb1a4e21e41b94b39b08bb54ad1a294f636084c07ff351e2b42d4e548906cfe1cd3daa234a43a7915ab799bd06243a6d5cd629ad4f86c4",
      "file": "src/app/services/general-services/electron-api.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "getFile",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<File | null>",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "processText",
          "args": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveFile",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "data",
              "type": "Blob",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "data",
              "type": "Blob",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiStrategy } from '../../interfaces/api.strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ElectronApiService implements ApiStrategy {\r\n  async processText(input: string): Promise<string> {\r\n    throw new Error('not implemented');\r\n    // return window.electron.ipcRenderer.invoke('process-text', input);\r\n  }\r\n\r\n  async getFile(path: string): Promise<File | null> {\r\n    throw new Error('not implemented');\r\n\r\n    // return window.electron.ipcRenderer.invoke('get-file', path);\r\n  }\r\n\r\n  async saveFile(path: string, data: Blob): Promise<void> {\r\n    throw new Error('not implemented');\r\n\r\n    // await window.electron.ipcRenderer.invoke('save-file', path, data);\r\n  }\r\n}\r\n",
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "FirebaseScriptStorageService",
      "id": "injectable-FirebaseScriptStorageService-863ae9ef2c7b6d32d766ec79d468e94030af7249132193308504bd56b66a1b7594e42fd97e6b41b7eb16b426a0ceb1a8f29fc9bf62d1180b0cc848057e3d8f6c",
      "file": "src/app/services/script-storage-services/firebase-script-storage.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "delete",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "get",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<FunctionScript | null>",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAll",
          "args": [],
          "optional": false,
          "returnType": "Promise<FunctionScript[]>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FunctionScript } from '../../interfaces/function-script.interface';\r\nimport { ScriptStorageStrategy } from '../../interfaces/script-storage.strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FirebaseScriptStorageService implements ScriptStorageStrategy {\r\n  save(script: FunctionScript): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  get(id: string): Promise<FunctionScript | null> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  getAll(): Promise<FunctionScript[]> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  delete(id: string): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  // constructor(private firestore: Firestore) {}\r\n\r\n  // async save(script: FunctionScript): Promise<void> {\r\n  //   const scriptRef = doc(this.firestore, 'scripts', script.id);\r\n  //   await setDoc(scriptRef, script);\r\n  // }\r\n\r\n  // async get(id: string): Promise<FunctionScript | null> {\r\n  //   const scriptRef = doc(this.firestore, 'scripts', id);\r\n  //   const docSnap = await getDoc(scriptRef);\r\n  //   return docSnap.exists() ? (docSnap.data() as FunctionScript) : null;\r\n  // }\r\n\r\n  // async getAll(): Promise<FunctionScript[]> {\r\n  //   const querySnapshot = await getDocs(collection(this.firestore, 'scripts'));\r\n  //   return querySnapshot.docs.map((doc) => doc.data() as FunctionScript);\r\n  // }\r\n\r\n  // async delete(id: string): Promise<void> {\r\n  //   const scriptRef = doc(this.firestore, 'scripts', id);\r\n  //   await deleteDoc(scriptRef);\r\n  // }\r\n}\r\n",
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "MessageService",
      "id": "injectable-MessageService-6bf49577ed2d296d7c84ed01a289a356e61485489ab4ef563d30b0268ce4082aac50ad46cafeebde4814fd50197a886b45ad151a2bb763928d16d4301fb5f563",
      "file": "src/app/services/assistants-services/message.service.ts",
      "properties": [
        {
          "name": "isLoading$",
          "defaultValue": "this.isLoadingSubject.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "isLoadingSubject",
          "defaultValue": "new BehaviorSubject<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [123]
        },
        {
          "name": "messages$",
          "defaultValue": "this.messagesSubject.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "messagesSubject",
          "defaultValue": "new BehaviorSubject<Message[]>([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "addMessage",
          "args": [
            {
              "name": "message",
              "type": "Message",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "message",
              "type": "Message",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateMessageId",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "sendPrompt",
          "args": [
            {
              "name": "prompt",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "extraInstruction",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "prompt",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "extraInstruction",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ASSISTANT_API_CONFIG } from '../../app.config';\r\nimport { AssistantService } from './assistant.service';\r\nimport { Message } from '../../interfaces/assistant.model';\r\nimport { PromptService } from './prompt.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  private messagesSubject = new BehaviorSubject<Message[]>([]); // Observable for messages\r\n  messages$ = this.messagesSubject.asObservable(); // Expose messages as observable\r\n\r\n  private isLoadingSubject = new BehaviorSubject<boolean>(false); // To track loading state\r\n  isLoading$ = this.isLoadingSubject.asObservable(); // Observable for loading state\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private assistantService: AssistantService,\r\n    private promptService: PromptService\r\n  ) {}\r\n\r\n  sendPrompt(prompt: string, extraInstruction?: string): void {\r\n    // Log the request\r\n    const requestMessage: Message = {\r\n      id: this.generateMessageId(),\r\n      type: 'request',\r\n      content: prompt,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n    this.addMessage(requestMessage); // Add request to message history\r\n\r\n    this.isLoadingSubject.next(true); // Set loading state to true\r\n\r\n    // Using Observer pattern instead of separate callbacks\r\n    this.promptService.prompt(prompt, extraInstruction).subscribe({\r\n      next: (response) => {\r\n        const responseMessage: Message = {\r\n          id: this.generateMessageId(),\r\n          type: 'response',\r\n          content: response?.data || 'No data',\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n        this.addMessage(responseMessage); // Add response to message history\r\n        this.isLoadingSubject.next(false); // Set loading state to false\r\n      },\r\n      error: (error) => {\r\n        const errorMessage: Message = {\r\n          id: this.generateMessageId(),\r\n          type: 'response',\r\n          content: 'Failed to process prompt.',\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n        this.addMessage(errorMessage); // Add error response\r\n        this.isLoadingSubject.next(false); // Set loading state to false\r\n      },\r\n      complete: () => {\r\n        // Optionally handle completion (if necessary)\r\n        console.log('Prompt processing completed');\r\n      },\r\n    });\r\n  }\r\n\r\n  // Add a message (request/response) to history\r\n  private addMessage(message: Message): void {\r\n    const currentMessages = this.messagesSubject.value;\r\n    this.messagesSubject.next([...currentMessages, message]);\r\n  }\r\n\r\n  // Utility to generate unique message ID\r\n  private generateMessageId(): string {\r\n    return Math.random().toString(36).substr(2, 9); // Simple ID generator\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "promptService",
            "type": "PromptService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "promptService",
            "type": "PromptService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "PromptService",
      "id": "injectable-PromptService-cc955fc8ee0c29cdbb56217bbfc9f6f16771a5559af3b0c0d6524c08b2e379fd808969c0c2d476260386391a06c9bc51371b50cd53b673f9d3f579e14d85b518",
      "file": "src/app/services/assistants-services/prompt.service.ts",
      "properties": [
        {
          "name": "apiUrl",
          "defaultValue": "ASSISTANT_API_CONFIG.baseUrl + ASSISTANT_API_CONFIG.promptUrl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "generateMessageId",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "prompt",
          "args": [
            {
              "name": "prompt",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "extraInstruction",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "prompt",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "extraInstruction",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sendPrompt",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "prompt",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "extraInstruction",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSends a prompt request to the API.\n",
          "description": "<p>Sends a prompt request to the API.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 674,
                "end": 676,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "id"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 668,
                "end": 673,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "param"
              },
              "comment": "<p>The ID for the prompt request</p>\n"
            },
            {
              "name": {
                "pos": 720,
                "end": 726,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "prompt"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 714,
                "end": 719,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "param"
              },
              "comment": "<p>The prompt message</p>\n"
            },
            {
              "name": {
                "pos": 759,
                "end": 775,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "extraInstruction"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 753,
                "end": 758,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "param"
              },
              "comment": "<p>Optional additional instructions</p>\n"
            },
            {
              "tagName": {
                "pos": 816,
                "end": 823,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>Observable with the server&#39;s response</p>\n"
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, Observable, of } from 'rxjs';\r\nimport { ASSISTANT_API_CONFIG } from '../../app.config';\r\nimport { AssistantService } from './assistant.service';\r\nimport { Message } from '../../interfaces/assistant.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PromptService {\r\n  private apiUrl =\r\n    ASSISTANT_API_CONFIG.baseUrl + ASSISTANT_API_CONFIG.promptUrl; // Base URL for prompt API\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private assistantService: AssistantService\r\n  ) {}\r\n\r\n  /**\r\n   * Sends a prompt request to the API.\r\n   * @param id The ID for the prompt request\r\n   * @param prompt The prompt message\r\n   * @param extraInstruction Optional additional instructions\r\n   * @returns Observable with the server's response\r\n   */\r\n  sendPrompt(\r\n    id: string,\r\n    prompt: string,\r\n    extraInstruction?: string\r\n  ): Observable<any> {\r\n    const requestBody = {\r\n      id,\r\n      prompt,\r\n      extraInstruction,\r\n    };\r\n\r\n    // Log the request message before sending\r\n    const requestMessage: Message = {\r\n      id: this.generateMessageId(),\r\n      type: 'request',\r\n      content: prompt,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    return this.http.post<any>(`${this.apiUrl}`, requestBody);\r\n  }\r\n\r\n  // Utility to generate a unique message ID\r\n  private generateMessageId(): string {\r\n    return Math.random().toString(36).substr(2, 9); // Simple ID generator\r\n  }\r\n\r\n  prompt(prompt: string, extraInstruction?: string): Observable<any> {\r\n    const selectedAssistant = this.assistantService.getSelectedAssistant();\r\n    if (!selectedAssistant) return of(null);\r\n    return this.sendPrompt(selectedAssistant.id, prompt, extraInstruction);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ScriptHelperService",
      "id": "injectable-ScriptHelperService-f8b8f2da2599be3d9fcadb6aca4f4aab2fe553f18c64d5d9f64624e34f43ec34119979ce59367fab0e8dc3485d0cb045035c8c7358e027692423d29721bd009e",
      "file": "src/app/services/script-helper.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "executeFunction",
          "args": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "args",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "dotDotDotToken": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "args",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "dotDotDotToken": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FunctionScript } from '../interfaces/function-script.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScriptHelperService {\r\n  executeFunction(script: FunctionScript, ...args: any[]): any {\r\n    const func = new Function('...args', script.code);\r\n    return func(...args);\r\n  }\r\n}\r\n",
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ScriptStorageService",
      "id": "injectable-ScriptStorageService-0e1be7216c7295a59e2b8c919347980535740257a20f9969316672079b462c7b71ad974cd9ff726cce6d528f4be6a03d38bca686d3480379d641a06bbf165f1e",
      "file": "src/app/services/script-storage-services/script-storage.service.ts",
      "properties": [
        {
          "name": "strategy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ScriptStorageStrategy",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "delete",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "get",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<FunctionScript | null>",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAll",
          "args": [],
          "optional": false,
          "returnType": "Promise<FunctionScript[]>",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SqliteScriptStorageService } from './sqlite-script-storage.service';\r\nimport { FirebaseScriptStorageService } from './firebase-script-storage.service';\r\nimport { environment } from '../../../environments/environment.electron';\r\nimport { FunctionScript } from '../../interfaces/function-script.interface';\r\nimport { ScriptStorageStrategy } from '../../interfaces/script-storage.strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScriptStorageService {\r\n  private strategy: ScriptStorageStrategy;\r\n\r\n  constructor() {\r\n    this.strategy =\r\n      environment.platform === 'electron'\r\n        ? new SqliteScriptStorageService()\r\n        : new FirebaseScriptStorageService();\r\n    // this.strategy =\r\n    //   environment.platform === 'electron'\r\n    //     ? new SqliteScriptStorageService()\r\n    //     : new FirebaseScriptStorageService(firestore);\r\n  }\r\n\r\n  save(script: FunctionScript): Promise<void> {\r\n    return this.strategy.save(script);\r\n  }\r\n\r\n  get(id: string): Promise<FunctionScript | null> {\r\n    return this.strategy.get(id);\r\n  }\r\n\r\n  getAll(): Promise<FunctionScript[]> {\r\n    return this.strategy.getAll();\r\n  }\r\n\r\n  delete(id: string): Promise<void> {\r\n    return this.strategy.delete(id);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 12
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "SqliteScriptStorageService",
      "id": "injectable-SqliteScriptStorageService-364a511286d29ce4cd5b1cb16678020c9f0c581973669ec567384a1a3128bb2846d56191bcce42b46aac01c4d5b04f14ec99fc9f91c109d84b5fdad4b949412b",
      "file": "src/app/services/script-storage-services/sqlite-script-storage.service.ts",
      "properties": [
        {
          "name": "db",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "delete",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "get",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<FunctionScript | null>",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAll",
          "args": [],
          "optional": false,
          "returnType": "Promise<FunctionScript[]>",
          "typeParameters": [],
          "line": 72,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "save",
          "args": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "script",
              "type": "FunctionScript",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FunctionScript } from '../../interfaces/function-script.interface';\r\nimport { ScriptStorageStrategy } from '../../interfaces/script-storage.strategy.interface';\r\n\r\nconst sqlite3 = require('sqlite3').verbose();\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SqliteScriptStorageService implements ScriptStorageStrategy {\r\n  private db: any;\r\n\r\n  constructor() {\r\n    this.db = new sqlite3.Database('scripts.db');\r\n    this.db.run(`\r\n      CREATE TABLE IF NOT EXISTS scripts (\r\n        id TEXT PRIMARY KEY,\r\n        name TEXT,\r\n        description TEXT,\r\n        code TEXT,\r\n        createdAt TEXT,\r\n        updatedAt TEXT\r\n      )\r\n    `);\r\n  }\r\n\r\n  async save(script: FunctionScript): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(\r\n        `\r\n        INSERT INTO scripts (id, name, description, code, createdAt, updatedAt)\r\n        VALUES (?, ?, ?, ?, ?, ?)\r\n        ON CONFLICT(id) DO UPDATE SET\r\n        name = excluded.name,\r\n        description = excluded.description,\r\n        code = excluded.code,\r\n        updatedAt = excluded.updatedAt\r\n        `,\r\n        [\r\n          script.id,\r\n          script.name,\r\n          script.description,\r\n          script.code,\r\n          script.createdAt.toISOString(),\r\n          script.updatedAt.toISOString(),\r\n        ],\r\n        (err: any) => (err ? reject(err) : resolve())\r\n      );\r\n    });\r\n  }\r\n\r\n  async get(id: string): Promise<FunctionScript | null> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.get(\r\n        `SELECT * FROM scripts WHERE id = ?`,\r\n        [id],\r\n        (err: any, row: any) => {\r\n          if (err) reject(err);\r\n          resolve(\r\n            row\r\n              ? {\r\n                  ...row,\r\n                  createdAt: new Date(row.createdAt),\r\n                  updatedAt: new Date(row.updatedAt),\r\n                }\r\n              : null\r\n          );\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  async getAll(): Promise<FunctionScript[]> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.all(`SELECT * FROM scripts`, [], (err: any, rows: any[]) => {\r\n        if (err) reject(err);\r\n        resolve(\r\n          rows.map((row) => ({\r\n            ...row,\r\n            createdAt: new Date(row.createdAt),\r\n            updatedAt: new Date(row.updatedAt),\r\n          }))\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  async delete(id: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(`DELETE FROM scripts WHERE id = ?`, [id], (err: any) =>\r\n        err ? reject(err) : resolve()\r\n      );\r\n    });\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 10
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "WebsiteApiService",
      "id": "injectable-WebsiteApiService-9f6d46603375f599f82150d195d8d4ad942ff6449be4afe1a2e0534af13a26794e1cd81859e9feb971556223f86bf6b45f7b27c10147525ca3855264faccac42",
      "file": "src/app/services/general-services/website-api.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "processText",
          "args": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiStrategy } from '../../interfaces/api.strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WebsiteApiService implements ApiStrategy {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  async processText(input: string): Promise<string> {\r\n   const result = await this.http\r\n      .post<{ result: string }>(\r\n        'https://<firebase-function-url>/process-text',\r\n        { input }\r\n      )\r\n      .toPromise();\r\n    if (!result) return '';\r\n    return result.result;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-1dec173fde26627838273ad7dcdd63172187bdb4cf7ff27dc907a98f1a4228462821af352cd9f87ac4990cfb88b131f695ce3e7ae5112995eb25695275a4b22e",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'codator'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "CodatorComponent",
          "type": "component"
        },
        {
          "name": "ChatActionComponent",
          "type": "component"
        },
        {
          "name": "RouterOutlet"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CodatorComponent } from './components/codator/codator.component';\r\nimport { ChatActionComponent } from './components/chat-action/chat-action.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [CodatorComponent, ChatActionComponent, RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  title = 'codator';\r\n}\r\n",
      "styleUrl": "./app.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<router-outlet></router-outlet>\r\n\r\n<!-- <app-chat-action></app-chat-action> -->\r\n"
    },
    {
      "name": "AssistantDetailsComponent",
      "id": "component-AssistantDetailsComponent-e791b77515c2333756aa966931f52c6e4ad0c7ee93dd7b1176ce41ca527cb499120c820eed2e5f905b9bf99473746e0e8039cd380a07a421e33ac22d4f7ff557",
      "file": "src/app/assistant-details/assistant-details.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-assistant-details",
      "styleUrls": ["./assistant-details.component.scss"],
      "styles": [],
      "templateUrl": ["./assistant-details.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "assistant",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "Assistant | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "fullAssistant",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "AssistantFull | null",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [
        {
          "name": "getAssistant",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadFullAssistant",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClose",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "NgIf"
        },
        {
          "name": "DatePipe",
          "type": "pipe"
        },
        {
          "name": "NgFor"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Assistant, AssistantFull } from '../interfaces/assistant.model';\r\nimport { AssistantService } from '../services/assistants-services/assistant.service';\r\nimport { DatePipe, NgFor, NgIf } from '@angular/common';\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [NgIf, DatePipe, NgFor],\r\n  selector: 'app-assistant-details',\r\n  templateUrl: './assistant-details.component.html',\r\n  styleUrls: ['./assistant-details.component.scss'],\r\n})\r\nexport class AssistantDetailsComponent implements OnInit {\r\n  @Input() assistant: Assistant | null = null;\r\n  fullAssistant: AssistantFull | null = null;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private assistantService: AssistantService\r\n  ) {}\r\n\r\n  getAssistant() {\r\n    return this.fullAssistant;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.assistant) {\r\n      this.loadFullAssistant(this.assistant.id);\r\n    } else {\r\n      // We will use the observable method of ActivatedRoute to handle any dynamic changes\r\n      this.route.paramMap.subscribe((params) => {\r\n        const assistantId = params.get('id');\r\n        console.log('Assistant ID from route:', assistantId); // Should log the correct ID\r\n        if (assistantId) {\r\n          this.loadFullAssistant(assistantId);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  loadFullAssistant(id: string) {\r\n    this.assistantService.getFullAssistantById(id).subscribe((response) => {\r\n      console.log('response');\r\n      console.log(response);\r\n      if (!response) return;\r\n      this.fullAssistant = response;\r\n      console.log('Fetched assistant:', this.fullAssistant);\r\n    });\r\n  }\r\n  onClose(): void {\r\n    // this.closeModal.emit();\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./assistant-details.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<div *ngIf=\"fullAssistant\" class=\"p-4\">\r\n  <h2 class=\"text-2xl font-semibold mb-4 text-center\">Assistant Details</h2>\r\n\r\n  <!-- Assistant Name -->\r\n  <div class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Name:</p>\r\n    <p class=\"text-gray-700\">{{ fullAssistant.name }}</p>\r\n  </div>\r\n\r\n  <!-- Assistant Description -->\r\n  <div class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Description:</p>\r\n    <p class=\"text-gray-700\">\r\n      {{ fullAssistant.description || \"No description available\" }}\r\n    </p>\r\n  </div>\r\n\r\n  <!-- Assistant Type -->\r\n  <div class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Type:</p>\r\n    <p class=\"text-gray-700\">{{ fullAssistant.type }}</p>\r\n  </div>\r\n\r\n  <!-- Assistant Model -->\r\n  <div class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Model:</p>\r\n    <p class=\"text-gray-700\">{{ fullAssistant.model }}</p>\r\n  </div>\r\n\r\n  <!-- Created and Updated Date -->\r\n  <div class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Created At:</p>\r\n    <p class=\"text-gray-700\">\r\n      {{ fullAssistant.createdAt | date : \"medium\" }}\r\n    </p>\r\n  </div>\r\n  <div class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Updated At:</p>\r\n    <p class=\"text-gray-700\">\r\n      {{ fullAssistant.updatedAt | date : \"medium\" }}\r\n    </p>\r\n  </div>\r\n\r\n  <!-- Assistant Tags (if any) -->\r\n  <div *ngIf=\"fullAssistant?.assistantTags?.length\" class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Tags:</p>\r\n    <div class=\"flex flex-wrap gap-2\">\r\n      <span\r\n        *ngFor=\"let tag of fullAssistant.assistantTags\"\r\n        class=\"badge badge-primary\"\r\n        >{{ tag }}</span\r\n      >\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Focused Memories -->\r\n  <div *ngIf=\"fullAssistant?.focusedMemories?.length\" class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Focused Memories:</p>\r\n    <ul class=\"list-inside\">\r\n      <li\r\n        *ngFor=\"let memory of fullAssistant.focusedMemories\"\r\n        class=\"bg-gray-100 p-2 rounded-lg mb-2\"\r\n      >\r\n        <p class=\"text-gray-800\">\r\n          <strong>Description:</strong> {{ memory.description }}\r\n        </p>\r\n        <p class=\"text-sm text-gray-600\">\r\n          <strong>Created At:</strong> {{ memory.createdAt | date : \"medium\" }}\r\n        </p>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- Memory Focus Rule -->\r\n  <div *ngIf=\"fullAssistant?.memoryFocusRule\" class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Memory Focus Rule:</p>\r\n    <p>\r\n      <strong>Max Results:</strong>\r\n      {{ fullAssistant.memoryFocusRule.maxResults }}\r\n    </p>\r\n    <p>\r\n      <strong>Priority Tags:</strong>\r\n      {{ fullAssistant.memoryFocusRule.priorityTags.join(\", \") || \"None\" }}\r\n    </p>\r\n  </div>\r\n\r\n  <!-- Feedback Summary -->\r\n  <div *ngIf=\"fullAssistant?.feedbackSummary\" class=\"mb-4\">\r\n    <p class=\"font-semibold text-lg\">Feedback Summary:</p>\r\n    <p>\r\n      <strong>Average Rating:</strong>\r\n      {{ fullAssistant.feedbackSummary.avgRating || \"N/A\" }}\r\n    </p>\r\n    <p>\r\n      <strong>Total Feedback:</strong>\r\n      {{ fullAssistant.feedbackSummary.totalFeedback || 0 }}\r\n    </p>\r\n  </div>\r\n\r\n  <!-- Close Button -->\r\n  <!-- <div class=\"mt-6 text-center\">\r\n    <button (click)=\"onClose()\" class=\"btn btn-primary\">Close</button>\r\n  </div> -->\r\n</div>\r\n"
    },
    {
      "name": "AssistantDetailsPopupComponent",
      "id": "component-AssistantDetailsPopupComponent-89d252b469a89098a9d782ef5d8b7cac5f7593372574df7c8f35343a17c67d6987aa262af1e1e7ca9141ce76594de9b809af2008e64774963429fa143066cb56",
      "file": "src/app/assistant-details-popup/assistant-details-popup.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-assistant-details-popup",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./assistant-details-popup.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "assistant",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Assistant",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "MAT_DIALOG_DATA"
            }
          ],
          "modifierKind": [170, 125]
        },
        {
          "name": "dialogRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatDialogRef<AssistantDetailsPopupComponent>",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [125]
        }
      ],
      "methodsClass": [
        {
          "name": "onClose",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "MatDialogContent"
        },
        {
          "name": "MatDialogActions"
        },
        {
          "name": "AssistantDetailsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogActions,\r\n  MatDialogContent,\r\n  MatDialogRef,\r\n} from '@angular/material/dialog';\r\nimport { Assistant, AssistantFull } from '../interfaces/assistant.model';\r\nimport { AssistantDetailsComponent } from '../assistant-details/assistant-details.component';\r\n\r\n@Component({\r\n  selector: 'app-assistant-details-popup',\r\n  imports: [MatDialogContent, MatDialogActions, AssistantDetailsComponent],\r\n  templateUrl: './assistant-details-popup.component.html',\r\n  styleUrl: './assistant-details-popup.component.scss',\r\n})\r\nexport class AssistantDetailsPopupComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AssistantDetailsPopupComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public assistant: Assistant\r\n  ) {}\r\n\r\n  onClose(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
      "styleUrl": "./assistant-details-popup.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "dialogRef",
            "type": "MatDialogRef<AssistantDetailsPopupComponent>",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "assistant",
            "type": "Assistant",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "dialogRef",
            "type": "MatDialogRef<AssistantDetailsPopupComponent>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "assistant",
            "type": "Assistant",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<h2 mat-dialog-title class=\"dialog-title\">Assistant Details</h2>\r\n<!-- <mat-dialog-title>Edit Task</mat-dialog-title> -->\r\n<mat-dialog-content>\r\n  <app-assistant-details [assistant]=\"assistant\"></app-assistant-details>\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n  <!-- <button\r\n    mat-icon-button\r\n    color=\"primary\"\r\n    style=\"color: rgb(15, 177, 75)\"\r\n    class=\"task-btn\"\r\n    (click)=\"onSave(task)\"\r\n    aria-label=\"Save Task\"\r\n  >\r\n    <mat-icon>check</mat-icon>\r\n  </button> -->\r\n</mat-dialog-actions>\r\n"
    },
    {
      "name": "AssistantLibraryComponent",
      "id": "component-AssistantLibraryComponent-b655da9b07055953c4690055450f0b80f3c304b66c2347feb898c796d600844b05f398c1ee260f0a51b3ff68df32bf6ced79f70907e74fc77879a305905cbec3",
      "file": "src/app/components/assistant-library/assistant-library.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-assistant-library",
      "styleUrls": ["./assistant-library.component.scss"],
      "styles": [],
      "templateUrl": ["./assistant-library.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "assistants",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Assistant[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "searchTerm",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "selectedAssistant",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Assistant | null",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "methodsClass": [
        {
          "name": "loadAssistants",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSearchChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "openAssistantDetailsPopup",
          "args": [
            {
              "name": "assistant",
              "type": "Assistant",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "assistant",
              "type": "Assistant",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "selectAssistant",
          "args": [
            {
              "name": "assistant",
              "type": "Assistant",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "assistant",
              "type": "Assistant",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "NgFor"
        },
        {
          "name": "NgClass"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { Assistant } from '../../interfaces/assistant.model';\r\nimport { AssistantService } from '../../services/assistants-services/assistant.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgClass, NgFor, NgIf } from '@angular/common';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AssistantDetailsPopupComponent } from '../../assistant-details-popup/assistant-details-popup.component';\r\n\r\n@Component({\r\n  selector: 'app-assistant-library',\r\n  imports: [FormsModule, NgFor, NgClass],\r\n  templateUrl: './assistant-library.component.html',\r\n  styleUrls: ['./assistant-library.component.scss'],\r\n})\r\nexport class AssistantLibraryComponent {\r\n  assistants: Assistant[] = [];\r\n  searchTerm: string = '';\r\n  selectedAssistant: Assistant | null = null;\r\n\r\n  constructor(\r\n    private assistantService: AssistantService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  selectAssistant(assistant: Assistant) {\r\n    this.selectedAssistant = assistant;\r\n    this.assistantService.selectAssistant(assistant);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadAssistants();\r\n  }\r\n\r\n  loadAssistants(): void {\r\n    this.assistantService.getAllAssistants().subscribe(\r\n      (response) => {\r\n        this.assistants = response.data;\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching assistants:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSearchChange(): void {\r\n    this.assistants = this.assistants.filter((assistant) =>\r\n      assistant.name.toLowerCase().includes(this.searchTerm.toLowerCase())\r\n    );\r\n  }\r\n\r\n  openAssistantDetailsPopup(assistant: Assistant): void {\r\n    if (!assistant) return;\r\n\r\n    const dialogRef = this.dialog.open(AssistantDetailsPopupComponent, {\r\n      width: '600px',\r\n      data: assistant,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        console.log('Assistant details closed:', result);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./assistant-library.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<!-- src/app/components/assistant-library/assistant-library.component.html -->\r\n<div class=\"bg-base-100 p-4 rounded-lg shadow-md mt-6\">\r\n  <h3 class=\"text-lg font-semibold mb-2 flex items-center\">\r\n    <span class=\"mr-2\">🤖</span> Assistant Library\r\n  </h3>\r\n\r\n  <input\r\n    type=\"text\"\r\n    [(ngModel)]=\"searchTerm\"\r\n    (ngModelChange)=\"onSearchChange()\"\r\n    class=\"input input-bordered input-sm w-full mb-4\"\r\n    placeholder=\"Search assistants...\"\r\n  />\r\n\r\n  <!-- List of Assistants -->\r\n  <ul class=\"space-y-2\">\r\n    <li\r\n      *ngFor=\"let assistant of assistants\"\r\n      (click)=\"selectAssistant(assistant)\"\r\n      [ngClass]=\"{\r\n        'bg-base-300': selectedAssistant === assistant,\r\n        'hover:bg-base-300': selectedAssistant !== assistant\r\n      }\"\r\n      class=\"p-3 rounded-lg cursor-pointer transition-all ease-in-out duration-300\"\r\n    >\r\n      <div class=\"flex items-center justify-between\">\r\n        <!-- Assistant Name -->\r\n        <span class=\"font-semibold text-base\">\r\n          {{ assistant.name }}\r\n        </span>\r\n\r\n        <!-- View Button (opens modal) -->\r\n        <button\r\n          class=\"btn btn-outline btn-sm\"\r\n          (click)=\"openAssistantDetailsPopup(assistant)\"\r\n        >\r\n          View\r\n        </button>\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
    },
    {
      "name": "ChatActionComponent",
      "id": "component-ChatActionComponent-a1bf9b1db7383814e206616bca2fff42b9f35c924cc60d72868e711bdf372af4c74a0943fe272b8cedf9d04a2f7f1d5677352fd5273f506e59da3f4b2f70f4e9",
      "file": "src/app/components/chat-action/chat-action.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-chat-action",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./chat-action.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "confirmationMessage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "errorMessage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "methodsClass": [
        {
          "name": "onDelegateToAssistant",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onDeleteChat",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onImprove",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onProcessWithFunction",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "NgIf"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { NgIf } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-action',\r\n  imports: [NgIf],\r\n  templateUrl: './chat-action.component.html',\r\n  styleUrl: './chat-action.component.scss',\r\n})\r\nexport class ChatActionComponent {\r\n  confirmationMessage: any;\r\n  errorMessage: any;\r\n  onProcessWithFunction() {\r\n    // Call your memory or function service to find matching functions\r\n    // const matchingFunctions = this.memoryService.findFunctionsForChat(\r\n    //   this.currentChat\r\n    // );\r\n    // this.chatService.processWithFunctions(matchingFunctions);\r\n    // this.confirmationMessage = 'Processing with function...';\r\n  }\r\n  onDelegateToAssistant() {\r\n    // // Delegate the current chat to another assistant for further action\r\n    // this.assistantService.delegateTask(\r\n    //   this.currentChat,\r\n    //   this.selectedAssistant\r\n    // );\r\n    // this.confirmationMessage = 'Task delegated to another assistant.';\r\n  }\r\n\r\n  onDeleteChat() {\r\n    // this.memoryService.deleteChatMemory(this.currentChat);\r\n    // this.confirmationMessage = 'Chat deleted from memory.';\r\n  }\r\n\r\n  onImprove() {\r\n    // this.assistantService.flagForImprovement(this.currentChat);\r\n    // this.confirmationMessage = 'Chat flagged for improvement.';\r\n  }\r\n}\r\n",
      "styleUrl": "./chat-action.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"p-4 bg-base-200 rounded-lg shadow-md space-y-4\">\r\n  <!-- Action Title -->\r\n  <h2 class=\"text-xl font-semibold\">Chat Actions</h2>\r\n\r\n  <!-- Action Buttons -->\r\n  <div class=\"space-x-2 flex items-center\">\r\n    <button class=\"btn btn-primary btn-sm\" (click)=\"onProcessWithFunction()\">\r\n      Process with Function\r\n    </button>\r\n    <button class=\"btn btn-secondary btn-sm\" (click)=\"onDelegateToAssistant()\">\r\n      Delegate\r\n    </button>\r\n    <button class=\"btn btn-warning btn-sm\" (click)=\"onDeleteChat()\">\r\n      Delete\r\n    </button>\r\n    <button class=\"btn btn-success btn-sm\" (click)=\"onImprove()\">\r\n      Improve\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Confirmation Message -->\r\n  <div\r\n    *ngIf=\"confirmationMessage\"\r\n    class=\"p-2 bg-green-100 text-green-800 rounded\"\r\n  >\r\n    {{ confirmationMessage }}\r\n  </div>\r\n\r\n  <!-- Error Message -->\r\n  <div *ngIf=\"errorMessage\" class=\"p-2 bg-red-100 text-red-800 rounded\">\r\n    {{ errorMessage }}\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "ChatAreaComponent",
      "id": "component-ChatAreaComponent-84c82893fbb59695d569f0e976237453d2fd9c7a406eec5ec778a5b7567f401afba7992b5cf398658ee1e19c34ca5e22c9bc4e3eeb51a5bb4d2e478f6b888ca6",
      "file": "src/app/components/chat-area/chat-area.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-chat-area",
      "styleUrls": ["./chat-area.component.scss"],
      "styles": [],
      "templateUrl": ["./chat-area.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ChatMessagesComponent",
          "type": "component"
        },
        {
          "name": "ChatInputComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms'; // <-- Import this\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChatMessagesComponent } from '../chat-messages/chat-messages.component';\r\nimport { ChatInputComponent } from '../chat-input/chat-input.component';\r\n\r\n@Component({\r\n  selector: 'app-chat-area',\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ChatMessagesComponent,\r\n    ChatInputComponent,\r\n  ],\r\n  templateUrl: './chat-area.component.html',\r\n  styleUrls: ['./chat-area.component.scss'],\r\n})\r\nexport class ChatAreaComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./chat-area.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 18
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<!-- app-chat-area.component.html -->\r\n<div class=\"flex-1 h-full overflow-auto p-4 space-y-4\">\r\n  <app-chat-messages></app-chat-messages>\r\n  <app-chat-input></app-chat-input>\r\n</div>\r\n"
    },
    {
      "name": "ChatInputComponent",
      "id": "component-ChatInputComponent-f70de3575733744b9a378cb1e6135d477a60b3850eb49e2f3c23a484ff8631c1c9f24249badbf84c0ac57d718776dd3f36f3bdc278999e843b5269c5f17e703f",
      "file": "src/app/components/chat-input/chat-input.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-chat-input",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./chat-input.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "assistant",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Assistant | null",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "userCorrection",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "userPrompt",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [
        {
          "name": "prompt",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "CodingInputComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CodingInputComponent } from '../coding-input/coding-input.component';\r\nimport { PromptService } from '../../services/assistants-services/prompt.service';\r\nimport { MessageService } from '../../services/assistants-services/message.service';\r\nimport { AssistantService } from '../../services/assistants-services/assistant.service';\r\nimport { Assistant } from '../../interfaces/assistant.model';\r\n\r\n@Component({\r\n  selector: 'app-chat-input',\r\n  imports: [FormsModule, CodingInputComponent],\r\n  templateUrl: './chat-input.component.html',\r\n  styleUrl: './chat-input.component.scss',\r\n})\r\nexport class ChatInputComponent {\r\n  userPrompt = '';\r\n  userCorrection = '';\r\n  assistant: Assistant | null = null;\r\n\r\n  constructor(\r\n    private messagingService: MessageService,\r\n    private assistantService: AssistantService\r\n  ) {\r\n    this.assistantService.selectedAssistant$.subscribe((result) => {\r\n      if (!result) return;\r\n      this.assistant = result;\r\n    });\r\n  }\r\n\r\n  async prompt() {\r\n    // prompt + separator + correction if exists\r\n    const politeIntro = 'Please: ';\r\n    const separator = '\\n...###🤍';\r\n    let prompt = '';\r\n    if (this.userPrompt.length < 1) return;\r\n    prompt += politeIntro + this.userPrompt;\r\n    if (this.userCorrection) {\r\n      prompt += separator + this.userCorrection;\r\n    }\r\n    const response = await this.messagingService.sendPrompt(prompt);\r\n\r\n    console.log(response);\r\n  }\r\n}\r\n",
      "styleUrl": "./chat-input.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "messagingService",
            "type": "MessageService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "messagingService",
            "type": "MessageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "assistantService",
            "type": "AssistantService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<!-- chat-area.component.html -->\r\n<div class=\"p-4 bg-base-200\">\r\n  <label class=\"text-lg font-semibold\">Ask {{ assistant?.name }}</label>\r\n  <div class=\"flex items-center mt-2 space-x-4\">\r\n    <textarea\r\n      [(ngModel)]=\"userPrompt\"\r\n      class=\"textarea textarea-bordered w-full h-16 resize-none\"\r\n      placeholder=\"Describe the task or question...\"\r\n    ></textarea>\r\n    <button class=\"btn btn-primary btn-md\" (click)=\"prompt()\">\r\n      Submit Prompt\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"p-4 bg-base-200 mt-4\">\r\n  <label class=\"text-lg font-semibold\">Work Area (Correction Area)</label>\r\n\r\n  <!-- Textarea with DaisyUI dark theme -->\r\n  <app-coding-input></app-coding-input>\r\n\r\n  <!-- depends on if assistan is of type=\"chat\" or \"assistant\" -->\r\n  <!-- chat doesnt have threads or instructions, it has keep in mind and Chat Remember, which is basically same as thread remember as it uses focuses memopries... -->\r\n  <button class=\"btn btn-secondary mt-4\" (click)=\"prompt()\">\r\n    Keep in mind For now (this prompt)\r\n  </button>\r\n  <button class=\"btn btn-secondary mt-4\" (click)=\"prompt()\">\r\n    Thread Remember (this assistant conversation and future conversations) (it\r\n    is possible to keep it temporary if we remove this memory after session...)\r\n  </button>\r\n  <button class=\"btn btn-secondary mt-4\" (click)=\"prompt()\">\r\n    Instruction Remember (this assistant)\r\n  </button>\r\n  <button class=\"btn btn-secondary mt-4\" (click)=\"prompt()\">\r\n    Just Remember (general memory we might use later)\r\n  </button>\r\n  <!-- maybe consider  -->\r\n</div>\r\n"
    },
    {
      "name": "ChatMessagesComponent",
      "id": "component-ChatMessagesComponent-91be232940c3c1863d7c38d6e75d7f354eb386ef40ca117db86df11ab2e9c5a6f5056a01e5200972d2552f96de68b0fca95b2b62add7312b2ec5e34feed328ee",
      "file": "src/app/components/chat-messages/chat-messages.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-chat-messages",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./chat-messages.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isLoading",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "messages",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Message[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "showAllMessages",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 22
        }
      ],
      "methodsClass": [
        {
          "name": "deleteMessage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "rememberMessage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "NgFor"
        },
        {
          "name": "NgClass"
        },
        {
          "name": "DatePipe",
          "type": "pipe"
        },
        {
          "name": "NgIf"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MessageService } from '../../services/assistants-services/message.service';\r\nimport { DatePipe, NgClass, NgFor, NgIf } from '@angular/common';\r\nimport { PromptService } from '../../services/assistants-services/prompt.service';\r\nimport { Message } from '../../interfaces/assistant.model';\r\n//export interface Message {\r\n//   id: string; // Unique identifier for the message\r\n//   type: 'request' | 'response'; // Type of message (request or response)\r\n//   content: string; // The content of the message\r\n//   timestamp: string; // Timestamp for tracking the time of the message\r\n// }\r\n@Component({\r\n  selector: 'app-chat-messages',\r\n  imports: [FormsModule, NgFor, NgClass, DatePipe, NgIf],\r\n  templateUrl: './chat-messages.component.html',\r\n  styleUrl: './chat-messages.component.scss',\r\n})\r\nexport class ChatMessagesComponent {\r\n  messages: Message[] = [];\r\n  isLoading: boolean = false;\r\n  showAllMessages: boolean = false;\r\n\r\n  constructor(private messageService: MessageService) {}\r\n\r\n  ngOnInit(): void {\r\n    // Subscribe to message changes\r\n    this.messageService.messages$.subscribe((messages) => {\r\n      this.messages = messages;\r\n    });\r\n\r\n    // Subscribe to loading state\r\n    this.messageService.isLoading$.subscribe((isLoading) => {\r\n      this.isLoading = isLoading;\r\n    });\r\n  }\r\n\r\n  deleteMessage() {}\r\n  rememberMessage() {}\r\n}\r\n",
      "styleUrl": "./chat-messages.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "messageService",
            "type": "MessageService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "messageService",
            "type": "MessageService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<div class=\"w-full max-w-2xl mx-auto mt-6 p-4 rounded-lg shadow-md\">\r\n  <!-- Message List Container -->\r\n  <div class=\"space-y-4\">\r\n    <!-- Show 2 messages by default (Request and Response) -->\r\n    <ng-container *ngFor=\"let message of messages; let i = index\">\r\n      <div\r\n        *ngIf=\"i < 2 || showAllMessages\"\r\n        class=\"p-4 rounded-lg shadow-md flex items-center justify-between\"\r\n        [ngClass]=\"message.type === 'request' ? 'bg-gray-600' : 'bg-teal-800'\"\r\n      >\r\n        <!-- Text aligned to the left -->\r\n        <span class=\"text-lg flex-1\">\r\n          {{ message.content }}\r\n        </span>\r\n\r\n        <!-- Buttons aligned to the right -->\r\n        <div class=\"flex space-x-2\">\r\n          <button class=\"btn btn-xs bg-slate-500\" (click)=\"rememberMessage()\">\r\n            Remember\r\n          </button>\r\n          <button class=\"btn btn-xs bg-yellow-800\" (click)=\"deleteMessage()\">\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <!-- Loading State -->\r\n    <div\r\n      [ngClass]=\"isLoading ? 'visible text-center' : 'invisible text-center'\"\r\n    >\r\n      <span class=\"loading loading-ring text-error loading-lg\"></span>\r\n    </div>\r\n\r\n    <!-- Dropdown for showing all messages -->\r\n    <div class=\"mt-2 text-center\">\r\n      <button\r\n        class=\"btn btn-xs btn-primary\"\r\n        (click)=\"showAllMessages = !showAllMessages\"\r\n      >\r\n        {{ showAllMessages ? \"Show Less\" : \"Show All Messages\" }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "CodatorComponent",
      "id": "component-CodatorComponent-c4016b5e066ecf49fbe440b0fc23015a3ab21ce444ea14ef9da721941ae2d540f4673f544c6716d95bbcbc1bb591a905ea01994d67a355d843cf3a40f609a77c",
      "file": "src/app/components/codator/codator.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-codator",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./codator.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "ChatAreaComponent",
          "type": "component"
        },
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "AssistantLibraryComponent",
          "type": "component"
        },
        {
          "name": "FunctionLibraryComponent",
          "type": "component"
        },
        {
          "name": "ProjectLibraryComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { ChatAreaComponent } from '../chat-area/chat-area.component';\r\nimport { FormsModule } from '@angular/forms'; // <-- Import this\r\nimport { CommonModule, NgFor } from '@angular/common';\r\nimport { AssistantLibraryComponent } from '../assistant-library/assistant-library.component';\r\nimport { FunctionLibraryComponent } from '../function-library/function-library.component';\r\nimport { ProjectLibraryComponent } from '../project-library/project-library.component';\r\n\r\n@Component({\r\n  selector: 'app-codator',\r\n  imports: [\r\n    ChatAreaComponent,\r\n    CommonModule,\r\n    FormsModule,\r\n    AssistantLibraryComponent,\r\n    FunctionLibraryComponent,\r\n    ProjectLibraryComponent,\r\n  ],\r\n  templateUrl: './codator.component.html',\r\n  styleUrl: './codator.component.scss',\r\n})\r\nexport class CodatorComponent {}\r\n",
      "styleUrl": "./codator.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"flex h-screen\">\r\n  <!-- Sidebar: Project, Function, Assistant Libraries -->\r\n  <div class=\"w-1/4 bg-base-200 p-4 space-y-6\">\r\n    <!-- Project Library -->\r\n    <app-project-library></app-project-library>\r\n\r\n    <!-- Function Library -->\r\n    <app-function-library></app-function-library>\r\n\r\n    <!-- Assistant Library -->\r\n    <app-assistant-library></app-assistant-library>\r\n  </div>\r\n\r\n  <!-- Parent Container (flex) -->\r\n  <div class=\"flex flex-1 flex-col\">\r\n    <app-chat-area></app-chat-area>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "CodingInputComponent",
      "id": "component-CodingInputComponent-561a217828e71851d0ea1e2b36fb93919ea0ba7406b1c8c82bb19b251b3bfe219652ec0fe73cce2c48c57ab33cc70cfb2cf47711b28b1ab6856520b4a8377838",
      "file": "src/app/components/coding-input/coding-input.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-coding-input",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./coding-input.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "userCorrection",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methodsClass": [
        {
          "name": "closingChar",
          "args": [
            {
              "name": "openingChar",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "openingChar",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getIndent",
          "args": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "selectionStart",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "input",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "selectionStart",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleBracket",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleEnter",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleKeys",
          "args": [
            {
              "name": "$event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleSnippets",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleTab",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-coding-input',\r\n  imports: [FormsModule],\r\n  templateUrl: './coding-input.component.html',\r\n  styleUrl: './coding-input.component.scss',\r\n})\r\nexport class CodingInputComponent {\r\n  userCorrection = '';\r\n\r\n  handleTab(event: KeyboardEvent) {\r\n    const editor: HTMLTextAreaElement = event.target as HTMLTextAreaElement;\r\n\r\n    // Handle the \"Tab\" key for indentation (inserting spaces)\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault();\r\n\r\n      const selectionStart = editor.selectionStart;\r\n      const selectionEnd = editor.selectionEnd;\r\n\r\n      const tab = '    '; // Define a constant tab (4 spaces)\r\n\r\n      // Insert 4 spaces as a tab equivalent\r\n      const value = editor.value;\r\n      editor.value =\r\n        value.substring(0, selectionStart) +\r\n        tab +\r\n        value.substring(selectionEnd);\r\n\r\n      // Move the caret after the inserted tab\r\n      editor.selectionStart = editor.selectionEnd = selectionStart + tab.length; // Move caret by 4 spaces\r\n    }\r\n  }\r\n\r\n  handleEnter(event: KeyboardEvent) {\r\n    const editor: HTMLTextAreaElement = event.target as HTMLTextAreaElement;\r\n\r\n    // If the \"Enter\" key is pressed\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault(); // Prevent the default Enter behavior\r\n\r\n      const selectionStart = editor.selectionStart;\r\n      const selectionEnd = editor.selectionEnd;\r\n      const value = editor.value;\r\n\r\n      const indent = this.getIndent(value, selectionStart);\r\n\r\n      // Insert the new line with the same indentation as the current line\r\n      const newLine = '\\n' + indent; // New line with preserved indentation\r\n      const newValue =\r\n        value.substring(0, selectionStart) +\r\n        newLine +\r\n        value.substring(selectionEnd);\r\n\r\n      // Update the textarea's value with the new line and move caret to the right position\r\n      editor.value = newValue;\r\n      editor.selectionStart = editor.selectionEnd =\r\n        selectionStart + newLine.length; // Place the cursor after the indentation\r\n    }\r\n  }\r\n  getIndent(input: string, selectionStart: number) {\r\n    // Get the current line's indentation\r\n    const currentLine = input.substring(0, selectionStart).split('\\n').pop(); // Get the current line\r\n    const indentMatch = currentLine?.match(/^(\\s*)/); // Match leading spaces or tabs\r\n\r\n    // Preserve indentation of the current line\r\n    const indent = indentMatch ? indentMatch[1] : ''; // If there's no indentation, use an empty string\r\n    return indent;\r\n  }\r\n\r\n  handleBracket(event: KeyboardEvent) {\r\n    const editor: HTMLTextAreaElement = event.target as HTMLTextAreaElement;\r\n\r\n    if (event.key === '{' || event.key === '(' || event.key === '[') {\r\n      const start = editor.selectionStart;\r\n      const end = editor.selectionEnd;\r\n      const closingObject = this.closingChar(event.key);\r\n      editor.value =\r\n        editor.value.slice(0, start) +\r\n        closingObject +\r\n        editor.value.slice(start, editor.value.length);\r\n      editor.selectionStart = start;\r\n      editor.selectionEnd = end;\r\n    }\r\n  }\r\n\r\n  handleKeys($event: KeyboardEvent) {\r\n    // Preserve indentation of the current line\r\n    this.handleTab($event);\r\n    this.handleEnter($event);\r\n    this.handleBracket($event);\r\n    this.handleSnippets($event);\r\n  }\r\n\r\n  handleSnippets(e: KeyboardEvent) {\r\n    // Trigger only on space key\r\n    if (e.key === ' ') {\r\n      const editor: HTMLTextAreaElement = e.target as HTMLTextAreaElement;\r\n      const cursorPos = editor.selectionStart;\r\n\r\n      // Get the word before the cursor\r\n      const textBeforeCursor = editor.value.slice(0, cursorPos);\r\n      const words = textBeforeCursor.split(/\\s+/); // Split by spaces to get individual words\r\n      const currentWord = words[words.length - 1]; // The word being typed\r\n\r\n      const indent = this.getIndent(editor.value, editor.selectionStart);\r\n\r\n      // Define a list of keywords and their snippets\r\n      const snippets: { [key: string]: string } = {\r\n        function: `function name() {\\n  \\n}`,\r\n        for: `for (let i = 0; i < length; i++) {\\n  \\n${indent}}`,\r\n        if: `if (condition) {\\n  \\n${indent}}`,\r\n        try: `try {\\n  \\n${indent}} catch (error) {\\n  \\n${indent}}`,\r\n        catch: `catch (error) {\\n  \\n${indent}}`,\r\n      };\r\n\r\n      // Check if the current word is in the snippets object\r\n      if (snippets[currentWord]) {\r\n        // Replace the current word with the full snippet\r\n        const start = editor.selectionStart;\r\n        const end = editor.selectionEnd;\r\n\r\n        // Replace the word with the snippet\r\n        editor.value =\r\n          editor.value.slice(0, start - currentWord.length) + // Remove the word before the cursor\r\n          snippets[currentWord] + // Insert the snippet\r\n          editor.value.slice(end); // Keep the rest of the content\r\n\r\n        // Move the cursor after the inserted snippet (just after the closing parenthesis)\r\n        const snippetLength = snippets[currentWord].length;\r\n        editor.selectionStart = editor.selectionEnd = start + snippetLength - 1; // Position cursor after snippet\r\n      }\r\n    }\r\n  }\r\n\r\n  closingChar(openingChar: string): string {\r\n    if (openingChar === '{') return '}';\r\n    if (openingChar === '(') return ')';\r\n    if (openingChar === '[') return ']';\r\n    return '';\r\n  }\r\n}\r\n",
      "styleUrl": "./coding-input.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<textarea\r\n  id=\"editor\"\r\n  [(ngModel)]=\"userCorrection\"\r\n  class=\"textarea textarea-bordered w-full h-48 bg-gray-800 text-white placeholder-gray-400\"\r\n  placeholder=\"Write your correction here...\"\r\n  (keydown)=\"handleKeys($event)\"\r\n></textarea>\r\n"
    },
    {
      "name": "FunctionLibraryComponent",
      "id": "component-FunctionLibraryComponent-6e48668c5b73ca2aeff70cc3e1b8e7406147159253e56db75faaa8956320a98c9ea9fa1dcb52f773443066ca88a6b3a3644a5861cfb4011b02a7b5f5aa550034",
      "file": "src/app/components/function-library/function-library.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-function-library",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./function-library.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-function-library',\r\n  imports: [],\r\n  templateUrl: './function-library.component.html',\r\n  styleUrl: './function-library.component.scss'\r\n})\r\nexport class FunctionLibraryComponent {\r\n\r\n}\r\n",
      "styleUrl": "./function-library.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"bg-base-100 p-4 rounded-lg shadow-md mt-6\">\r\n  <h3 class=\"text-lg font-semibold mb-2 flex items-center\">\r\n    <span class=\"mr-2\">🔧</span> Function Library\r\n  </h3>\r\n  <input\r\n    type=\"text\"\r\n    class=\"input input-bordered input-sm w-full mb-4\"\r\n    placeholder=\"Search function...\"\r\n  />\r\n  <ul class=\"space-y-2\">\r\n    <li class=\"p-2 bg-base-200 rounded\">\r\n      <span>Function One</span>\r\n      <button class=\"btn btn-outline btn-sm float-right\">View</button>\r\n    </li>\r\n    <li class=\"p-2 bg-base-200 rounded\">\r\n      <span>Function Two</span>\r\n      <button class=\"btn btn-outline btn-sm float-right\">View</button>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
    },
    {
      "name": "ProjectLibraryComponent",
      "id": "component-ProjectLibraryComponent-d866b5997e67861d7c5f37e3e03264a5e06e3dfeeeb656b6f8a58317b072a791e9ebe4c1c4504cf0f1610faeda73f5df70d610478b27c716596a72e3ca3b5102",
      "file": "src/app/components/project-library/project-library.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-project-library",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./project-library.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "projects",
          "defaultValue": "[{ id: 'qq', name: 'pewpew' }]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "NgFor"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { NgFor } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-project-library',\r\n  imports: [NgFor],\r\n  templateUrl: './project-library.component.html',\r\n  styleUrl: './project-library.component.scss',\r\n})\r\nexport class ProjectLibraryComponent {\r\n  projects: { id: string; name: string }[] = [{ id: 'qq', name: 'pewpew' }];\r\n}\r\n",
      "styleUrl": "./project-library.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"bg-base-100 p-4 rounded-lg shadow-md\">\r\n  <h3 class=\"text-lg font-semibold mb-2 flex items-center\">\r\n    <span class=\"mr-2\">📂</span> Project Library\r\n  </h3>\r\n  <select class=\"select select-bordered w-full\">\r\n    <option *ngFor=\"let project of projects\" [value]=\"project.id\">\r\n      {{ project.name }}\r\n    </option>\r\n  </select>\r\n  <button class=\"btn btn-primary mt-4\">Load Project</button>\r\n</div>\r\n"
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "API_STRATEGY",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/api-strategy-provider.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<ApiStrategy>('API_STRATEGY')"
      },
      {
        "name": "appConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ApplicationConfig",
        "defaultValue": "{\r\n  providers: [\r\n    provideHttpClient(withInterceptorsFromDi()),\r\n    {\r\n      provide: API_STRATEGY,\r\n      useClass: ApiStrategyProvider,\r\n    },\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n  ],\r\n}"
      },
      {
        "name": "ASSISTANT_API_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  baseUrl: 'http://192.168.1.182:3001/',\r\n  assistantUrl: 'assistant/',\r\n  feedbackUrl: 'feedback/',\r\n  memoryUrl: 'memory/',\r\n  taskUrl: 'task/',\r\n  relationshipGraphUrl: 'relationship-graph/',\r\n  tagUrl: 'tag/',\r\n  promptUrl: 'prompt/',\r\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.electron.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: false,\r\n  platform: 'electron',\r\n  apiUrl: 'http://localhost:3000/api', // Replace with your Electron backend\r\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: false,\r\n  platform: 'web',\r\n  apiUrl: 'http://localhost:4200/api',\r\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.website.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: true,\r\n  platform: 'website',\r\n  apiUrl: 'https://<firebase-project-id>.firebaseio.com/api',\r\n}"
      },
      {
        "name": "sqlite3",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/services/script-storage-services/sqlite-script-storage.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require('sqlite3').verbose()"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/app/api-strategy-provider.ts": [
        {
          "name": "API_STRATEGY",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/api-strategy-provider.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<ApiStrategy>('API_STRATEGY')"
        }
      ],
      "src/app/app.config.ts": [
        {
          "name": "appConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ApplicationConfig",
          "defaultValue": "{\r\n  providers: [\r\n    provideHttpClient(withInterceptorsFromDi()),\r\n    {\r\n      provide: API_STRATEGY,\r\n      useClass: ApiStrategyProvider,\r\n    },\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n  ],\r\n}"
        },
        {
          "name": "ASSISTANT_API_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  baseUrl: 'http://192.168.1.182:3001/',\r\n  assistantUrl: 'assistant/',\r\n  feedbackUrl: 'feedback/',\r\n  memoryUrl: 'memory/',\r\n  taskUrl: 'task/',\r\n  relationshipGraphUrl: 'relationship-graph/',\r\n  tagUrl: 'tag/',\r\n  promptUrl: 'prompt/',\r\n}"
        }
      ],
      "src/environments/environment.electron.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.electron.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: false,\r\n  platform: 'electron',\r\n  apiUrl: 'http://localhost:3000/api', // Replace with your Electron backend\r\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: false,\r\n  platform: 'web',\r\n  apiUrl: 'http://localhost:4200/api',\r\n}"
        }
      ],
      "src/environments/environment.website.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.website.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: true,\r\n  platform: 'website',\r\n  apiUrl: 'https://<firebase-project-id>.firebaseio.com/api',\r\n}"
        }
      ],
      "src/app/services/script-storage-services/sqlite-script-storage.service.ts": [
        {
          "name": "sqlite3",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/services/script-storage-services/sqlite-script-storage.service.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require('sqlite3').verbose()"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/api-strategy-provider.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ApiStrategyProvider",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/api-strategy-provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "API_STRATEGY",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "appConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ASSISTANT_API_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/assistant-details-popup/assistant-details-popup.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AssistantDetailsPopupComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/assistant-details/assistant-details.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AssistantDetailsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/components/assistant-library/assistant-library.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AssistantLibraryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/components/chat-action/chat-action.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChatActionComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/components/chat-area/chat-area.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChatAreaComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/components/chat-input/chat-input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChatInputComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/components/chat-messages/chat-messages.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChatMessagesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/components/codator/codator.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CodatorComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/coding-input/coding-input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CodingInputComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/components/function-library/function-library.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FunctionLibraryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/project-library/project-library.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProjectLibraryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/api.strategy.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ApiStrategy",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/assistant.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Assistant",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/assistant.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Assistant",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/assistant.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "AssistantFull",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/assistant.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "FeedbackSummary",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/assistant.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "FocusedMemory",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/assistant.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MemoryFocusRule",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/assistant.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Message",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/function-script.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "FunctionScript",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/interfaces/script-storage.strategy.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ScriptStorageStrategy",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/services/assistants-services/assistant.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AssistantService",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/services/assistants-services/message.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MessageService",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/services/assistants-services/prompt.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PromptService",
        "coveragePercent": 16,
        "coverageCount": "1/6",
        "status": "low"
      },
      {
        "filePath": "src/app/services/general-services/api.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ApiService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/services/general-services/electron-api.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ElectronApiService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/services/general-services/website-api.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "WebsiteApiService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/services/script-helper.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ScriptHelperService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/services/script-storage-services/firebase-script-storage.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "FirebaseScriptStorageService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/services/script-storage-services/script-storage.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ScriptStorageService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/services/script-storage-services/sqlite-script-storage.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SqliteScriptStorageService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/services/script-storage-services/sqlite-script-storage.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "sqlite3",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.electron.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.website.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
