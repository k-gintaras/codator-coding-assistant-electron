import { Injectable } from '@angular/core';
import { FunctionScript } from '../interfaces/function-script.interface';
import { MemoryService } from './memory.service';
import { HttpClient } from '@angular/common/http';
import { Memory } from './assistants-api/memory.service';

@Injectable({
  providedIn: 'root',
})
export class FunctionLibraryService {
  constructor(private memoryService: MemoryService, private http: HttpClient) {}

  // Save function script to memory and associate it with the "function" tag
  async save(script: FunctionScript): Promise<boolean> {
    const memory: Memory = {
      id: '', // Auto-generated by memoryService
      type: 'function', // Categorize as "knowledge" memory
      name: script.name, // Now stored properly instead of encoding it
      summary: script.description || 'No description', // Store summary
      description: null, // No longer needed for name+description storage
      data: { data: script.code || {} }, // Store the script code
      createdAt: null,
      updatedAt: null,
    };

    // Create the memory and associate with "function" tag
    const id = await this.memoryService.createMemory(memory);
    if (!id) return false;

    return await this.memoryService.updateTagsForMemory(id, ['function']);
  }

  async getAllFunctions(): Promise<FunctionScript[]> {
    const memories: Memory[] = await this.memoryService.getMemoriesByTags([
      'function',
    ]);

    return memories.map((memory: Memory) => ({
      id: memory.id,
      name: memory.name || 'Unnamed', // Use `name` directly
      description: memory.summary || 'No Description', // Use `summary` instead of splitting `description`
      code: memory.data.data, // Assuming 'data' contains the function code
      createdAt: memory.createdAt ? new Date(memory.createdAt) : new Date(),
      updatedAt: memory.updatedAt ? new Date(memory.updatedAt) : new Date(),
    }));
  }

  // Get a specific function memory by ID
  async get(id: string): Promise<FunctionScript | null> {
    return this.memoryService.getMemory(id).then((memory) => {
      if (memory) {
        return {
          id: memory.id,
          name: memory.name || 'Unnamed',
          description: memory.summary || 'No Description',
          code: memory.data.data,
          createdAt: memory.createdAt ? new Date(memory.createdAt) : new Date(),
          updatedAt: memory.updatedAt ? new Date(memory.updatedAt) : new Date(),
        };
      }
      return null;
    });
  }

  // Update an existing function memory (edit its code and description)
  async update(id: string, updatedScript: FunctionScript): Promise<boolean> {
    const memory: Memory = {
      id,
      type: 'knowledge',
      name: updatedScript.name, // Directly update name
      summary: updatedScript.description || 'No description', // Store description in `summary`
      description: null, // No longer needed
      data: { data: updatedScript.code || {} },
      createdAt: null,
      updatedAt: null,
    };

    return this.memoryService.updateMemory(memory);
  }

  // Delete a function memory by ID
  async delete(id: string): Promise<boolean> {
    return this.memoryService.deleteMemory(id);
  }
}
